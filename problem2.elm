{-
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms
-}
import List exposing (sum, filter)
import Element exposing (show, toHtml)


isEven n = n % 2 == 0

fibonacci : Int -> Int
fibonacci n =
    case n of
    0 -> 1
    1 -> 1
    n -> fibonacci (n - 1) + fibonacci (n - 2)

fiboSeq : Int -> List Int
fiboSeq maxN =
    case maxN of
        0 -> [1]
        n -> fiboSeq (n - 1) ++ [fibonacci n]



fiboSeqUntil : Int -> (Int -> Bool) -> List Int
fiboSeqUntil n cond =
    let
        list = []
        x = fibonacci n
    in
        if cond x == True then
            list ++ [x] ++ fiboSeqUntil (n + 1) cond
        else
            list



list = fiboSeqUntil 0 (\ n -> n < 1000000)
listFiltered = filter (\ n -> n % 2 == 0) list

main =
    toHtml <| show {
        list = toString list,
        listFiltered = toString listFiltered,
        sum = sum listFiltered
    }
